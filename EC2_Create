
2장. 첫 번째 웹 응용프로그램 배포하기



$ aws ec2 describe-vpcs   ## VPC ID 확인


Page.68

## 새로운 보안 그룹 생성

$aws ec2 create-security-group \
    --group-name HelloWorld \
    --description "Hello World Demo" \
    --vpc-id vpc-c981bbaf
    
    ** 그룹 ID확인 할것
    
    

ssh(tcp/22)과 tcp/3000 만 인바운드 트래픽 오픈  --------------------- (기본적으로 모든 아웃바운드 트래픽 허용)

$ aws ec2 authorize-security-group-ingress \
    --group-id "넣을 것" \
    --protocol tcp \
    --port 22 \
    --cidr 0.0.0.0/0
    
$ aws ec2 authorize-security-group-ingress \
    --group-id "넣을 것" \
    --protocol tcp \
    --port 3000 \
    --cidr 0.0.0.0/0



## 보안그룹 적용 확인

$ aws ec2 describe-security-groups \
    --group-id "넣을 것" \
    --output text
    
    
    

** aws ec2 describe-subnets --output table      ------------  옵션 사용해보기
                                     json
                                     text
                                     
                                     
   
  
Page.70    
## ssh키 생성하기 (EC2에서 키페어를 생성하고 사설키를 다운로드)

$ aws ec2 create-key-pair --key-name EffectiveDevOpsAWS
==> 출력값 파일에 저장 ("echo -e (붙이기) > 파일명")

$ echo -e "------BEGIN RSA PRIVATE KEY ~~ > ~/.ssh/EffectiveDevOpsAWS.pem

$ chmod 600 ~/.ssh/EffectiveDevOpsAWS.pem


## EC2 인스턴스 띄우기

$ aws ec2 run-instances \ 
--instance-type t2.micro \
--key-name EffectiveDevOpsAWS \
--security-group-ids "넣을것" \
--image-id ami-4fffc834 \
--subnet-id subnet-899c56c1



## 인스턴스 생성의 진행사항 추적 (aws ec2 run-instances 에서 인스턴스ID 확인)

$ aws ec2 describe-instance-status --instance-ids "인스턴스ID"
==> SystemStatus 값이 Initializing -> ok 로 바뀌면 완료



## EC2 인스턴스 DNS or 공인 IP 찾기

$ aws ec2 describe-instances \
--instance-ids "인스턴스ID" \
--query "Reservation[*].Instances[*].PublicIpAddress"


## EC2 인스턴스 접속하기 (AMI가 아마존 리눅스 기본사용자는 ec2-user)

$ ssh -i ~/.ssh/EffectiveDevOpsAWS.pem ec2-user@공인IP



Page.77

## node.js 설치하기

[ec2-usr@IP~]$ sudo yum update
[ec2-usr@IP~]$ sudo yum install --enablerepo=epel -y nodejs
[ec2-usr@IP~]$ node -v



## node.js 파일 생성 (helloworld.js)

var http = require("http")

http.createServer(function (request, response) {

   // Send the HTTP header
   // HTTP Status: 200 : OK
   // Content Type: text/plain
   response.writeHead(200, {'Content-Type': 'text/plain'})

   // Send the response body as "Hello World"
   response.end('Hello World\n')
}).listen(3000)

// Console will print the message
console.log('Server running')


## 또는 깃허브에서 다운로드 가능
[ec2-usr@IP~]$ wget http://bit.ly/2vESNuc -O /home/ec2-user/helloworld.js


## 노드 실행
[ec2-usr@IP~]$ node helloworld.js
Server running

==> 웹테스트 http://공인IP:3000
==> CMD테스트 curl localhost:3000





## upstart를 이용한 프로세스 자동살리기 (/etc/init/helloworld.conf)  --------------  (아마존 리눅스만 가능)

description "Hello world Deamon"

# Start when the system is ready to do networking.
start on started elastic-network-interfaces

# Stop when the system is on its way down.
stop on shutdown

respawn
script
    exec su --session-command="/usr/bin/node /home/ec2-user/helloworld.js" ec2-user
end script


## (/etc/init/helloworld.conf) 다운받기    
[ec2-usr@IP~]$ sudo wget http://bit.ly/2vVvT18 -O /etc/init/helloworld.conf
[ec2-usr@IP~]$ sudo start helloworld   (아마존 리눅스만 가능)


[ec2-usr@IP~]$ sudo stop helloworld   ------------ 서비스 종료 (아마존 리눅스만 가능)

[ec2-usr@IP~]$ sudo ec2-metadata --instance-id   (ID번호 확인)
instance-id: "ID번호"
[ec2-usr@IP~]$ exit
logout

$ aws ec2 terminate-instances --instance-ids "ID번호"   (EC2 인스턴스 종료)



### 2장 요약 : 인스턴스와 보안그룹을 설정하기 위해 많은 단계를 거침


3장. 코드로서의 인프라 다루기 (3장에서는 소스제어 및 자동화를 이용)
1) 클라우드포메이션으로 JSON 설정파일을 통해 모든 AWS 리소스 생성 및 설정
   - 디자이너 (WEB GUI 를 통해 시각적으로 템플릿 수정)
   - 클라우드포머 (기존 인프라에서 템플릿 생성)
2) 구성관리 도구인 앤서블 - 이를 이용하면 운영체제 수준에서 좀 더 세밀한 변경을 할수 있음
    
    
    
    
    
    
    
    
    
    
    
    		
    
    
   
   
6장. AWS에서 컨테이너 실행하기
   
#TIP1. 알파인 리눅스는 가볍고 간단하고 보안성을 목적으로 개발한 리눅스 배포판이다.
      용량을 줄이기 위해 glibc 대신 musl libc 를 사용 / 쉘 명령어는 GNU util 대신 busybox 를 탑재.
      특히 도커(docker)에 채택되어 5M 크기의 리눅스 이미지로 유명.

    
#TIP2. 도커 클라이언트   $ docker pull
                        $ docker run
                        $ docker stop
       컨테이너라고 부르는 자체적인 폴더에서 이미지를 실행함.                  
                        
    
#TIP3. 리눅스에 도커설치하기 https://www.leafcats.com/153


## 도커 허브에서 (레지스트리) 이미지 가져오기
$ docker pull alpine    (알파인 리눅스 이미지)

$ docker run alpine echo "Hello World"   (컨테이너 실행)
Hello World

$ docker run -it alpine /bin/sh  (컨테이너 대화형 방식)

$ docker run -d alpine sleep 100   (백그라운드 실행)

$ docker ps  (샐행중인 컨테이너 조회)

$ docker (start/stop/rm) 컨테이너ID or NAME
        

    
Page.266

## Dockerfile 작성하기
1) 응용프로그램과 함께 배치된 텍스트 파일
2) 도커가 신규 도커 이미지를 작성하는 방법을 지시하는 역할
3) 도커 이미지 생성을 어떻게 시작할지, 컨테이너 파일시스템에 무엇을 복사할지, 어떤 네트워크 포트를 확장할지 도커에 지시









    
    
    
    
    
    
